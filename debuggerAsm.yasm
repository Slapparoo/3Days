GLOBAL JIT_DebuggerHit;
USE64
SECTION .text
;ctl+8+8+8+8
;bp+8+8+8
;routine+8+8
;RET+8
;RBP+0
JIT_DebuggerHit: PUSH RBP
MOV RBP,RSP
PUSH RBX
MOV RAX, [RBP+8]
MOV RBX,[RBP+8+8+8+8]
MOV [RBX+16], RAX ;jit_debugger_ctrl.last_rip
POP RBX
MOV RAX,QWORD  [RSP+8+8+8]
CMP BYTE  [RAX],0
JNE JIT_DebuggerHit.enter
;JIT_DBG_STEP is 1
;JIT_DBG_NEXT is 2
;JIT_DBG_FIN is 3
MOV RAX,QWORD  [RSP+8+8+8+8]
CMP RAX,0
JNE JIT_DebuggerHit.step_check
JMP JIT_DebuggerHit.exit_lab
.enter ;
SUB RSP,256+8;Align to 16 bytes
MOV [RSP+8],RBX
MOV [RSP+16],RCX
MOV [RSP+24],RDX
MOV [RSP+32],RSI
MOV [RSP+40],RDI
MOV RAX,[RBP]
MOV [RSP+56],RAX
MOV [RSP+64],R8
MOV [RSP+72],R9
MOV [RSP+80],R10
MOV [RSP+88],R11
MOV [RSP+96],R12
MOV [RSP+112],R13
MOV [RSP+120],R14
MOV [RSP+128],R15
MOV RAX,RSP
PUSH QWORD [RBP+8] ;Return address
PUSH QWORD [RBP+8+8+8] ;breakpoint
PUSH RAX ;Registers
MOV RAX, [RBP+8+8] ;Routine
CALL RAX
MOV RAX,[RSP]
MOV RBX,[RSP+8]
MOV RCX,[RSP+16]
MOV RDX,[RSP+24]
MOV RSI,[RSP+32]
MOV RDI,[RSP+40]
MOV R8,[RSP+64]
MOV R9,[RSP+72]
MOV R10,[RSP+80]
MOV R11,[RSP+88]
MOV R12,[RSP+96]
MOV R13,[RSP+112]
MOV R14,[RSP+120]
MOV R15,[RSP+128]
ADD RSP,256+8
.exit_lab LEAVE
RET
.step_check
;JIT_DBG_STEP is 1
;JIT_DBG_NEXT is 2
;JIT_DBG_FIN is 3
MOV RAX, [RAX]
CMP RAX,1
JE JIT_DebuggerHit.enter
CMP RAX,2
JNE JIT_DebuggerHit.next
MOV RAX,QWORD  [RSP+8+8+8+8]
MOV RAX,[RAX+8]
;Check if is equal or greater than previous stack pointer
CMP RAX,[RBP]
JBE JIT_DebuggerHit.enter
.next
CMP RAX,3
JNE JIT_DebuggerHit.exit_lab
;Check if is greater than previous stack pointer
MOV RAX,QWORD  [RSP+8+8+8+8]
MOV RAX,[RAX+8]
CMP RAX,[RBP]
JB JIT_DebuggerHit.enter
JMP JIT_DebuggerHit.exit_lab
SECTION .data
