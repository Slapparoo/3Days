//https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences
#define ED_KEY_REDRAW 0+512
#define ED_KEY_UP 1+512
#define ED_KEY_DOWN 2+512
#define ED_KEY_RIGHT 3+512
#define ED_KEY_LEFT 4+512
#define ED_KEY_HOME 5+512
#define ED_KEY_END 6+512
#define ED_KEY_CTRL_UP 7+512
#define ED_KEY_CTRL_DOWN 8+512
#define ED_KEY_CTRL_LEFT 9+512
#define ED_KEY_CTRL_RIGHT 10+512
#define ED_KEY_BACKSPACE 11+512
#define ED_KEY_ESCAPE 12+512
#define ED_KEY_INSERT 13+512
#define ED_KEY_DELETE 14+512
#define ED_KEY_PAGEUP 15+512
#define ED_KEY_PAGEDOWN 16+512
#define ED_KEY_F1 17+512
#define ED_KEY_F2 18+512
#define ED_KEY_F3 19+512
#define ED_KEY_F4 20+512
#define ED_KEY_F5 21+512
#define ED_KEY_F6 22+512
#define ED_KEY_F7 23+512
#define ED_KEY_F8 24+512
#define ED_KEY_F9 25+512
#define ED_KEY_F10 26+512
#define ED_KEY_F11 27+512
#define ED_KEY_F12 28+512
#define ED_KEY_RESIZE 29+512
#define ED_KEY_SHIFT_LEFT 30+512
#define ED_KEY_SHIFT_RIGHT 31+512
#define ED_KEY_SHIFT_UP 32+512
#define ED_KEY_SHIFT_DOWN 33+512
#define ED_KEY_CTRL_BACKSPACE 34+512
#define ED_KEY_SIZE_UP 35+512
#define ED_KEY_SIZE_DOWN 36+512
#define ED_KEY_QUIT 37+512
I64 ALT_KEY(U8 chr) {return ToUpper(chr)+256;}

#define SDL_SCANCODE_UNKNOWN 0x000
#define SDL_SCANCODE_A 0x004
#define SDL_SCANCODE_B 0x005
#define SDL_SCANCODE_C 0x006
#define SDL_SCANCODE_D 0x007
#define SDL_SCANCODE_E 0x008
#define SDL_SCANCODE_F 0x009
#define SDL_SCANCODE_G 0x00A
#define SDL_SCANCODE_H 0x00B
#define SDL_SCANCODE_I 0x00C
#define SDL_SCANCODE_J 0x00D
#define SDL_SCANCODE_K 0x00E
#define SDL_SCANCODE_L 0x00F
#define SDL_SCANCODE_M 0x010
#define SDL_SCANCODE_N 0x011
#define SDL_SCANCODE_O 0x012
#define SDL_SCANCODE_P 0x013
#define SDL_SCANCODE_Q 0x014
#define SDL_SCANCODE_R 0x015
#define SDL_SCANCODE_S 0x016
#define SDL_SCANCODE_T 0x017
#define SDL_SCANCODE_U 0x018
#define SDL_SCANCODE_V 0x019
#define SDL_SCANCODE_W 0x01A
#define SDL_SCANCODE_X 0x01B
#define SDL_SCANCODE_Y 0x01C
#define SDL_SCANCODE_Z 0x01D
#define SDL_SCANCODE_1 0x01E
#define SDL_SCANCODE_2 0x01F
#define SDL_SCANCODE_3 0x020
#define SDL_SCANCODE_4 0x021
#define SDL_SCANCODE_5 0x022
#define SDL_SCANCODE_6 0x023
#define SDL_SCANCODE_7 0x024
#define SDL_SCANCODE_8 0x025
#define SDL_SCANCODE_9 0x026
#define SDL_SCANCODE_0 0x027
#define SDL_SCANCODE_RETURN 0x028
#define SDL_SCANCODE_ESCAPE 0x029
#define SDL_SCANCODE_BACKSPACE 0x02A
#define SDL_SCANCODE_TAB 0x02B
#define SDL_SCANCODE_SPACE 0x02C
#define SDL_SCANCODE_MINUS 0x02D
#define SDL_SCANCODE_EQUALS 0x02E
#define SDL_SCANCODE_LEFTBRACKET 0x02F
#define SDL_SCANCODE_RIGHTBRACKET 0x030
#define SDL_SCANCODE_BACKSLASH 0x031
#define SDL_SCANCODE_NONUSHASH 0x032
#define SDL_SCANCODE_SEMICOLON 0x033
#define SDL_SCANCODE_APOSTROPHE 0x034
#define SDL_SCANCODE_GRAVE 0x035
#define SDL_SCANCODE_COMMA 0x036
#define SDL_SCANCODE_PERIOD 0x037
#define SDL_SCANCODE_SLASH 0x038
#define SDL_SCANCODE_CAPSLOCK 0x039
#define SDL_SCANCODE_F1 0x03A
#define SDL_SCANCODE_F2 0x03B
#define SDL_SCANCODE_F3 0x03C
#define SDL_SCANCODE_F4 0x03D
#define SDL_SCANCODE_F5 0x03E
#define SDL_SCANCODE_F6 0x03F
#define SDL_SCANCODE_F7 0x040
#define SDL_SCANCODE_F8 0x041
#define SDL_SCANCODE_F9 0x042
#define SDL_SCANCODE_F10 0x043
#define SDL_SCANCODE_F11 0x044
#define SDL_SCANCODE_F12 0x045
#define SDL_SCANCODE_PRINTSCREEN 0x046
#define SDL_SCANCODE_SCROLLLOCK 0x047
#define SDL_SCANCODE_PAUSE 0x048
#define SDL_SCANCODE_INSERT 0x049
#define SDL_SCANCODE_HOME 0x04A
#define SDL_SCANCODE_PAGEUP 0x04B
#define SDL_SCANCODE_DELETE 0x04C
#define SDL_SCANCODE_END 0x04D
#define SDL_SCANCODE_PAGEDOWN 0x04E
#define SDL_SCANCODE_RIGHT 0x04F
#define SDL_SCANCODE_LEFT 0x050
#define SDL_SCANCODE_DOWN 0x051
#define SDL_SCANCODE_UP 0x052
#define SDL_SCANCODE_NUMLOCKCLEAR 0x053
#define SDL_SCANCODE_KP_DIVIDE 0x054
#define SDL_SCANCODE_KP_MULTIPLY 0x055
#define SDL_SCANCODE_KP_MINUS 0x056
#define SDL_SCANCODE_KP_PLUS 0x057
#define SDL_SCANCODE_KP_ENTER 0x058
#define SDL_SCANCODE_KP_1 0x059
#define SDL_SCANCODE_KP_2 0x05A
#define SDL_SCANCODE_KP_3 0x05B
#define SDL_SCANCODE_KP_4 0x05C
#define SDL_SCANCODE_KP_5 0x05D
#define SDL_SCANCODE_KP_6 0x05E
#define SDL_SCANCODE_KP_7 0x05F
#define SDL_SCANCODE_KP_8 0x060
#define SDL_SCANCODE_KP_9 0x061
#define SDL_SCANCODE_KP_0 0x062
#define SDL_SCANCODE_KP_PERIOD 0x063
#define SDL_SCANCODE_NONUSBACKSLASH 0x064
#define SDL_SCANCODE_APPLICATION 0x065
#define SDL_SCANCODE_POWER 0x066
#define SDL_SCANCODE_KP_EQUALS 0x067
#define SDL_SCANCODE_F13 0x068
#define SDL_SCANCODE_F14 0x069
#define SDL_SCANCODE_F15 0x06A
#define SDL_SCANCODE_F16 0x06B
#define SDL_SCANCODE_F17 0x06C
#define SDL_SCANCODE_F18 0x06D
#define SDL_SCANCODE_F19 0x06E
#define SDL_SCANCODE_F20 0x06F
#define SDL_SCANCODE_F21 0x070
#define SDL_SCANCODE_F22 0x071
#define SDL_SCANCODE_F23 0x072
#define SDL_SCANCODE_F24 0x073
#define SDL_SCANCODE_EXECUTE 0x074
#define SDL_SCANCODE_HELP 0x075
#define SDL_SCANCODE_MENU 0x076
#define SDL_SCANCODE_SELECT 0x077
#define SDL_SCANCODE_STOP 0x078
#define SDL_SCANCODE_AGAIN 0x079
#define SDL_SCANCODE_UNDO 0x07A
#define SDL_SCANCODE_CUT 0x07B
#define SDL_SCANCODE_COPY 0x07C
#define SDL_SCANCODE_PASTE 0x07D
#define SDL_SCANCODE_FIND 0x07E
#define SDL_SCANCODE_MUTE 0x07F
#define SDL_SCANCODE_VOLUMEUP 0x080
#define SDL_SCANCODE_VOLUMEDOWN 0x081
#define SDL_SCANCODE_LOCKINGCAPSLOCK 0x082
#define SDL_SCANCODE_LOCKINGNUMLOCK 0x083
#define SDL_SCANCODE_LOCKINGSCROLLLOCK 0x084
#define SDL_SCANCODE_KP_COMMA 0x085
#define SDL_SCANCODE_KP_EQUALSAS400 0x086
#define SDL_SCANCODE_INTERNATIONAL1 0x087
#define SDL_SCANCODE_INTERNATIONAL2 0x088
#define SDL_SCANCODE_INTERNATIONAL3 0x089
#define SDL_SCANCODE_INTERNATIONAL4 0x08A
#define SDL_SCANCODE_INTERNATIONAL5 0x08B
#define SDL_SCANCODE_INTERNATIONAL6 0x08C
#define SDL_SCANCODE_INTERNATIONAL7 0x08D
#define SDL_SCANCODE_INTERNATIONAL8 0x08E
#define SDL_SCANCODE_INTERNATIONAL9 0x08F
#define SDL_SCANCODE_LANG1 0x090
#define SDL_SCANCODE_LANG2 0x091
#define SDL_SCANCODE_LANG3 0x092
#define SDL_SCANCODE_LANG4 0x093
#define SDL_SCANCODE_LANG5 0x094
#define SDL_SCANCODE_LANG6 0x095
#define SDL_SCANCODE_LANG7 0x096
#define SDL_SCANCODE_LANG8 0x097
#define SDL_SCANCODE_LANG9 0x098
#define SDL_SCANCODE_ALTERASE 0x099
#define SDL_SCANCODE_SYSREQ 0x09A
#define SDL_SCANCODE_CANCEL 0x09B
#define SDL_SCANCODE_CLEAR 0x09C
#define SDL_SCANCODE_PRIOR 0x09D
#define SDL_SCANCODE_RETURN2 0x09E
#define SDL_SCANCODE_SEPARATOR 0x09F
#define SDL_SCANCODE_OUT 0x0A0
#define SDL_SCANCODE_OPER 0x0A1
#define SDL_SCANCODE_CLEARAGAIN 0x0A2
#define SDL_SCANCODE_CRSEL 0x0A3
#define SDL_SCANCODE_EXSEL 0x0A4
#define SDL_SCANCODE_KP_00 0x0B0
#define SDL_SCANCODE_KP_000 0x0B1
#define SDL_SCANCODE_THOUSANDSSEPARATOR 0x0B2
#define SDL_SCANCODE_DECIMALSEPARATOR 0x0B3
#define SDL_SCANCODE_CURRENCYUNIT 0x0B4
#define SDL_SCANCODE_CURRENCYSUBUNIT 0x0B5
#define SDL_SCANCODE_KP_LEFTPAREN 0x0B6
#define SDL_SCANCODE_KP_RIGHTPAREN 0x0B7
#define SDL_SCANCODE_KP_LEFTBRACE 0x0B8
#define SDL_SCANCODE_KP_RIGHTBRACE 0x0B9
#define SDL_SCANCODE_KP_TAB 0x0BA
#define SDL_SCANCODE_KP_BACKSPACE 0x0BB
#define SDL_SCANCODE_KP_A 0x0BC
#define SDL_SCANCODE_KP_B 0x0BD
#define SDL_SCANCODE_KP_C 0x0BE
#define SDL_SCANCODE_KP_D 0x0BF
#define SDL_SCANCODE_KP_E 0x0C0
#define SDL_SCANCODE_KP_F 0x0C1
#define SDL_SCANCODE_KP_XOR 0x0C2
#define SDL_SCANCODE_KP_POWER 0x0C3
#define SDL_SCANCODE_KP_PERCENT 0x0C4
#define SDL_SCANCODE_KP_LESS 0x0C5
#define SDL_SCANCODE_KP_GREATER 0x0C6
#define SDL_SCANCODE_KP_AMPERSAND 0x0C7
#define SDL_SCANCODE_KP_DBLAMPERSAND 0x0C8
#define SDL_SCANCODE_KP_VERTICALBAR 0x0C9
#define SDL_SCANCODE_KP_DBLVERTICALBAR 0x0CA
#define SDL_SCANCODE_KP_COLON 0x0CB
#define SDL_SCANCODE_KP_HASH 0x0CC
#define SDL_SCANCODE_KP_SPACE 0x0CD
#define SDL_SCANCODE_KP_AT 0x0CE
#define SDL_SCANCODE_KP_EXCLAM 0x0CF
#define SDL_SCANCODE_KP_MEMSTORE 0x0D0
#define SDL_SCANCODE_KP_MEMRECALL 0x0D1
#define SDL_SCANCODE_KP_MEMCLEAR 0x0D2
#define SDL_SCANCODE_KP_MEMADD 0x0D3
#define SDL_SCANCODE_KP_MEMSUBTRACT 0x0D4
#define SDL_SCANCODE_KP_MEMMULTIPLY 0x0D5
#define SDL_SCANCODE_KP_MEMDIVIDE 0x0D6
#define SDL_SCANCODE_KP_PLUSMINUS 0x0D7
#define SDL_SCANCODE_KP_CLEAR 0x0D8
#define SDL_SCANCODE_KP_CLEARENTRY 0x0D9
#define SDL_SCANCODE_KP_BINARY 0x0DA
#define SDL_SCANCODE_KP_OCTAL 0x0DB
#define SDL_SCANCODE_KP_DECIMAL 0x0DC
#define SDL_SCANCODE_KP_HEXADECIMAL 0x0DD
#define SDL_SCANCODE_LCTRL 0x0E0
#define SDL_SCANCODE_LSHIFT 0x0E1
#define SDL_SCANCODE_LALT 0x0E2
#define SDL_SCANCODE_LGUI 0x0E3
#define SDL_SCANCODE_RCTRL 0x0E4
#define SDL_SCANCODE_RSHIFT 0x0E5
#define SDL_SCANCODE_RALT 0x0E6
#define SDL_SCANCODE_RGUI 0x0E7
#define SDL_SCANCODE_MODE 0x101
#define SDL_SCANCODE_AUDIONEXT 0x102
#define SDL_SCANCODE_AUDIOPREV 0x103
#define SDL_SCANCODE_AUDIOSTOP 0x104
#define SDL_SCANCODE_AUDIOPLAY 0x105
#define SDL_SCANCODE_AUDIOMUTE 0x106
#define SDL_SCANCODE_MEDIASELECT 0x107
#define SDL_SCANCODE_WWW 0x108
#define SDL_SCANCODE_MAIL 0x109
#define SDL_SCANCODE_CALCULATOR 0x10A
#define SDL_SCANCODE_COMPUTER 0x10B
#define SDL_SCANCODE_AC_SEARCH 0x10C
#define SDL_SCANCODE_AC_HOME 0x10D
#define SDL_SCANCODE_AC_BACK 0x10E
#define SDL_SCANCODE_AC_FORWARD 0x10F
#define SDL_SCANCODE_AC_STOP 0x110
#define SDL_SCANCODE_AC_REFRESH 0x111
#define SDL_SCANCODE_AC_BOOKMARKS 0x112
#define SDL_SCANCODE_BRIGHTNESSDOWN 0x113
#define SDL_SCANCODE_BRIGHTNESSUP 0x114
#define SDL_SCANCODE_DISPLAYSWITCH 0x115
#define SDL_SCANCODE_KBDILLUMTOGGLE 0x116
#define SDL_SCANCODE_KBDILLUMDOWN 0x117
#define SDL_SCANCODE_KBDILLUMUP 0x118
#define SDL_SCANCODE_EJECT 0x119
#define SDL_SCANCODE_SLEEP 0x11A

if(IsMac) {
	I64 vKMOD_ALT=KMOD_ALT;
	I64 vKMOD_CTRL= KMOD_GUI;
} else {
	vKMOD_ALT=KMOD_ALT;
	vKMOD_CTRL=KMOD_CTRL;
}
U8 ibuffer[129];
I64 ibufferi=0;
I64 GetKey() {
    if(ibuffer[ibufferi]) {
        grabb:
        U8 tmp=ibuffer[ibufferi];
        ibuffer[ibufferi++]=0;
        return tmp;
    } else ibufferi=0;
    SDL_Event e;
    SDL_WaitEvent(&e);
    switch(e.type) {
        case SDL_WINDOWEVENT: {
            if(e.window.event==SDL_WINDOWEVENT_RESIZED)
                return ED_KEY_RESIZE;
            return ED_KEY_REDRAW;
        }
        case SDL_KEYDOWN:
        U8 sc;
        switch(sc=e.key.keysym.scancode) {
            case SDL_SCANCODE_TAB: return '\t';
            case SDL_SCANCODE_RETURN: return '\n';
						case SDL_SCANCODE_MINUS:
						if(e.key.keysym.mod&vKMOD_CTRL)
							return SDL_FlushEvent(SDL_TEXTINPUT),ED_KEY_SIZE_DOWN;
						break;
						case SDL_SCANCODE_EQUALS:
						if(e.key.keysym.mod&vKMOD_CTRL)
							return SDL_FlushEvent(SDL_TEXTINPUT),ED_KEY_SIZE_UP;
						break;
            case SDL_SCANCODE_BACKSPACE:
 	    if(e.key.keysym.mod&vKMOD_CTRL) {
                return ED_KEY_CTRL_BACKSPACE;
            } else
                return ED_KEY_BACKSPACE;
            case SDL_SCANCODE_A...SDL_SCANCODE_Z:
            if(e.key.keysym.mod&vKMOD_ALT) {
                SDL_FlushEvent(SDL_TEXTINPUT);
                return ALT_KEY(sc-SDL_SCANCODE_A+'a');
            } else if(e.key.keysym.mod&vKMOD_CTRL) {
                SDL_FlushEvent(SDL_TEXTINPUT);
                return(sc-SDL_SCANCODE_A+'a')&0x1f;
            }
            //Leave it to text input
            break;
            case SDL_SCANCODE_LEFT:
            if(e.key.keysym.mod&vKMOD_ALT) {
                return ED_KEY_CTRL_LEFT;
            } else if(e.key.keysym.mod&vKMOD_CTRL) {
                return ED_KEY_CTRL_LEFT;
            } else if(e.key.keysym.mod&KMOD_SHIFT) {
                return ED_KEY_SHIFT_LEFT;
            }
            return ED_KEY_LEFT;
            case SDL_SCANCODE_RIGHT:
            if(e.key.keysym.mod&vKMOD_ALT) {
                return ED_KEY_CTRL_RIGHT;
            } else if(e.key.keysym.mod&vKMOD_CTRL) {
                return ED_KEY_CTRL_RIGHT;
            } else if(e.key.keysym.mod&KMOD_SHIFT) {
                return ED_KEY_SHIFT_RIGHT;
            }
            return ED_KEY_RIGHT;
            case SDL_SCANCODE_UP:
            if(e.key.keysym.mod&vKMOD_ALT) {
                return ED_KEY_CTRL_UP;
            } else if(e.key.keysym.mod&vKMOD_CTRL) {
                return ED_KEY_CTRL_UP;
            } else if(e.key.keysym.mod&KMOD_SHIFT) {
                return ED_KEY_SHIFT_UP;
            }
            return ED_KEY_UP;
            case SDL_SCANCODE_DOWN:
            if(e.key.keysym.mod&vKMOD_ALT) {
                return ED_KEY_CTRL_DOWN;
            } else if(e.key.keysym.mod&vKMOD_CTRL) {
                return ED_KEY_CTRL_DOWN;
            } else if(e.key.keysym.mod&KMOD_SHIFT) {
                return ED_KEY_SHIFT_DOWN;
            }
            return ED_KEY_DOWN;
            case SDL_SCANCODE_HOME:
            return ED_KEY_HOME;
            case SDL_SCANCODE_END:
            return ED_KEY_END;
            case SDL_SCANCODE_PAGEDOWN:
            return ED_KEY_PAGEDOWN;
            case SDL_SCANCODE_PAGEUP:
            return ED_KEY_PAGEUP;
            case SDL_SCANCODE_ESCAPE:
            return ED_KEY_ESCAPE;
        }
        break;
        case SDL_QUIT:
        return ED_KEY_QUIT;
        case SDL_TEXTINPUT:
        StrCpy(ibuffer+ibufferi,e.text.text);
        goto grabb;
    }
    return ERR;
}
